plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id 'com.github.kt3k.coveralls' version '2.12.0'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'
apply plugin: "de.mannodermaus.android-junit5"

ext {
    libraryVersionCode = 30
    libraryVersionName = '3.3.0'

    //Bintray and Maven
    bintrayRepo = 'maven'
    bintrayName = 'frag-nav'

    publishedGroupId = 'com.ncapdevi'
    libraryName = 'FragNav'
    artifact = 'frag-nav'

    libraryDescription = 'A library to help manage multiple fragment stacks'

    siteUrl = 'https://github.com/ncapdevi/FragNav'
    gitUrl = 'https://github.com/ncapdevi/FragNav.git'

    developerId = 'ncapdevi'
    developerName = 'Nic Capdevila'
    developerEmail = 'ncapdevi@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode libraryVersionCode
        versionName libraryVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
                unitTests.all {
                    testLogging.events = ["passed", "skipped", "failed"]
                }
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.fragment:fragment-ktx:1.4.1"
    implementation "androidx.annotation:annotation:1.3.0"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0"
    testImplementation "org.robolectric:robolectric:4.2"

    testImplementation 'org.amshove.kluent:kluent-android:1.42'

    // Spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spek_version"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation('org.jetbrains.spek:spek-api:1.1.5') {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation('org.jetbrains.spek:spek-junit-platform-engine:1.1.5') {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
}

group = publishedGroupId
version = libraryVersionName

Object getBuildProperty(String varName, String defaultValue = null) {
    if (System.getenv().containsKey(varName)) {
        return System.getenv()[varName]
    }

    // read local.properties only once and cache properties
    if (rootProject.ext.localProperties == null) {
        File propsFile = file(rootProject.file('local.properties'))
        rootProject.ext.localProperties = new Properties()
        if (propsFile.exists() && propsFile.canRead()) {
            rootProject.ext.localProperties.load(new FileInputStream(propsFile))
        }
    }

    if (rootProject.ext.localProperties.containsKey(varName)) {
        return rootProject.ext.localProperties[varName]
    }

    if (rootProject.hasProperty(varName)) {
        return rootProject.property(varName)
    }

    return defaultValue
}

afterEvaluate {

    tasks.register("sourcesJar", Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    publishing {
        publications {
            aar(MavenPublication) {
                artifact sourcesJar
                from components.release
                version = project.version
            }
        }
    }

    publishing {
        repositories {
            maven {
                def contextUrl = getBuildProperty('ARTIFACTORY_CONTEXT_URL')
                def repoKey = getBuildProperty('ARTIFACTORY_REPO_KEY')
                // change to point to your repo, e.g. http://my.org/repo
                url = "$contextUrl/$repoKey"
                credentials {
                    username getBuildProperty('ARTIFACTORY_PUBLISH_USERNAME')
                    password getBuildProperty('ARTIFACTORY_PUBLISH_PASSWORD')
                }
            }
        }
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/debug/jacoco.xml"
}

tasks.coveralls {
    dependsOn 'jacocoTestReportDebug'
    onlyIf { System.env.'CI' }
}